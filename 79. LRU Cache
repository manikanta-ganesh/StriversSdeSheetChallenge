// https://www.codingninjas.com/codestudio/problems/lru-cache-implementation_670276?topList=striver-sde-sheet-problems&leftPanelTab=0

#include<bits/stdc++.h>

class Node{
  public:
  int key,val;
  Node* prev,*next;
  Node(int k,int v){
      key = k;val=v;
      prev=next = NULL;
  }
};

class LRUCache
{
private:
    
    Node* first, *last;
    int c,i;
    map<int,Node*> m;

    public:
    //Constructor for initializing the cache capacity with the given value.
    LRUCache(int cap)
    {
        // code here
        c=cap;
        i=0;
        first = last=NULL;
    }
    
    //Function to return value corresponding to the key.
    int get(int key)
    {
        // your code here
        
        if(m.find(key)==m.end()) return -1;
        
        int x = m[key]->val;
        
        Node* curr = m[key];
            if(curr==first) return x;
            if(curr==last) last = last->prev;
            if(curr->prev) curr->prev->next = curr->next;
            if(curr->next) curr->next->prev = curr->prev;
            
            curr->next = first;
            first->prev = curr;
            curr->prev = NULL;
            first = curr;
        
        return x;
        
    }
    
    //Function for storing key-value pair.
    void put(int key, int value)
    {
        // your code here   
        
        if(m.find(key)==m.end()){
            
            Node* node = new Node(key,value);
            m[key] = node;
            
            if( i<c && first==NULL && last==NULL){
                first=last=node;
                i++;
            }else if(i<c){
                node->next = first;
                first->prev = node;
                first = node;
                i++;
            }else if(i==c){
               if(last->prev) last->prev->next = NULL;
                m.erase(last->key);
                last = last->prev;
                
                if(last==NULL){
                    first=last=node;
                    return;
                }
                
                node->next = first;
                first->prev = node;
                first = node;
            }
        }else{
            Node* curr = m[key];
            curr->val = value;
            if(curr==first) return;
            if(curr==last) last = last->prev;
            if(curr->prev) curr->prev->next = curr->next;
            if(curr->next) curr->next->prev = curr->prev;
            
            curr->next = first;
            first->prev = curr;
            curr->prev = NULL;
            first = curr;
            
        }
        
        
    }
};
