// https://www.codingninjas.com/codestudio/problems/count-inversions_615?topList=striver-sde-sheet-problems&leftPanelTab=0

void merge(long long *arr, int l, int mid, int r, long long &ans){
    int n1 = mid-l+1;
    int n2 = r-mid;
    
   
    long long arr1[n1],arr2[n2];
    
    for(int i=0;i<n1;i++) arr1[i]=arr[l+i];
    for(int i=0;i<n2;i++) arr2[i]=arr[mid+1+i];
    
    int k=l;
    int i=0,j=0;
    while(i<n1 && j<n2){
        if(arr1[i]<=arr2[j]){
            arr[k++]=arr1[i++];
        }else{
            arr[k++]=arr2[j++];
            ans+=(n1-i);
        }
    }
    
    while(i<n1){
        arr[k++]=arr1[i++];
    }
    while(j<n2){
        arr[k++]=arr2[j++];
    }
    
    
    
    
}



void mergesort(long long *arr, int l, int r,long long &ans){
    if(l<r){
        int mid = (l+r)/2;
        mergesort(arr,l,mid,ans);
        mergesort(arr,mid+1,r,ans);
        merge(arr,l,mid,r,ans);
    }
}


long long getInversions(long long *arr, int n){
    // Write your code here.
    long long ans =0;
    
    mergesort(arr,0,n-1,ans);
    
    return ans;
    
}
