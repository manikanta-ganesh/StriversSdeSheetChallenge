// https://www.codingninjas.com/codestudio/problems/reverse-pairs_1112652?topList=striver-sde-sheet-problems&leftPanelTab=0

#include <bits/stdc++.h> 
void findans(vector<int> &arr1,vector<long long> &arr2, int &ans){
        
        int i=0,j=0,n=arr1.size(),m=arr2.size();
        
        while(i<n){
            while(j<m && arr1[i]>2*arr2[j]){
                j++;
            }
            ans+=j;
            i++;
        }
            
        
        
    }
    
    void merge(vector<int> &nums, int l, int mid, int r,int &ans){
        int n1 = mid-l+1,n2=r-mid;
        vector<int> arr1(n1,0);
        vector<long long> arr2(n2,0);
        for(int i=0;i<n1;i++) arr1[i]=nums[i+l];
        for(int i=0;i<n2;i++) arr2[i]=nums[mid+1+i];
        
        findans(arr1,arr2,ans);
        
        int k=l,i=0,j=0;
        
        while(i<n1 && j<n2){
            if(arr1[i]<arr2[j]){
                nums[k++]=arr1[i++];
            }else{
                nums[k++]=arr2[j++];
            }
        }
        
        while(i<n1){
            nums[k++]=arr1[i++];
        }
        while(j<n2){
            nums[k++]=arr2[j++];
        }
        
    }
    
    void mergesort(vector<int> &nums, int l, int r, int &ans){
        if(l<r){
            int mid = (l+r)/2;
            mergesort(nums,l,mid,ans);
            mergesort(nums,mid+1,r,ans);
            merge(nums,l,mid,r,ans);
        }
    }
    
    int reversePairs(vector<int>& nums, int n) {
        
        int ans =0;
        mergesort(nums,0,nums.size()-1,ans);
        return ans;
        
    }
